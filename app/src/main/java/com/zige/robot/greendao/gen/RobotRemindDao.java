package com.zige.robot.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zige.robot.greendao.entity.RobotRemind;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ROBOT_REMIND".
*/
public class RobotRemindDao extends AbstractDao<RobotRemind, Long> {

    public static final String TABLENAME = "ROBOT_REMIND";

    /**
     * Properties of entity RobotRemind.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Change_time = new Property(1, long.class, "change_time", false, "CHANGE_TIME");
        public final static Property Time = new Property(2, String.class, "time", false, "TIME");
        public final static Property Week = new Property(3, String.class, "week", false, "WEEK");
        public final static Property Member = new Property(4, String.class, "member", false, "MEMBER");
        public final static Property Context = new Property(5, String.class, "context", false, "CONTEXT");
        public final static Property IsOpen = new Property(6, int.class, "isOpen", false, "IS_OPEN");
    }


    public RobotRemindDao(DaoConfig config) {
        super(config);
    }
    
    public RobotRemindDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ROBOT_REMIND\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"CHANGE_TIME\" INTEGER NOT NULL ," + // 1: change_time
                "\"TIME\" TEXT," + // 2: time
                "\"WEEK\" TEXT," + // 3: week
                "\"MEMBER\" TEXT," + // 4: member
                "\"CONTEXT\" TEXT," + // 5: context
                "\"IS_OPEN\" INTEGER NOT NULL );"); // 6: isOpen
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ROBOT_REMIND\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RobotRemind entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getChange_time());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        String week = entity.getWeek();
        if (week != null) {
            stmt.bindString(4, week);
        }
 
        String member = entity.getMember();
        if (member != null) {
            stmt.bindString(5, member);
        }
 
        String context = entity.getContext();
        if (context != null) {
            stmt.bindString(6, context);
        }
        stmt.bindLong(7, entity.getIsOpen());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RobotRemind entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getChange_time());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        String week = entity.getWeek();
        if (week != null) {
            stmt.bindString(4, week);
        }
 
        String member = entity.getMember();
        if (member != null) {
            stmt.bindString(5, member);
        }
 
        String context = entity.getContext();
        if (context != null) {
            stmt.bindString(6, context);
        }
        stmt.bindLong(7, entity.getIsOpen());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public RobotRemind readEntity(Cursor cursor, int offset) {
        RobotRemind entity = new RobotRemind( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // change_time
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // week
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // member
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // context
            cursor.getInt(offset + 6) // isOpen
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RobotRemind entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setChange_time(cursor.getLong(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWeek(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMember(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContext(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsOpen(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RobotRemind entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RobotRemind entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RobotRemind entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
